binary search 
     when given a sorted array of data, binary search is a way of searching through that data to find an element in O(log n) time using a divide and conquer 
     strategy. it doesnt require you to look through the entire array in a linear way which would have a linear big o runtime 
binary search trees 
     they are a type of data structure with the added condition that each element to the eleft of a node must be less than a parent node 
     each left and right subtree is also iteslf a binary search tree 

binary search 
     with a sorted data-set, we can take advantage of the ordering to make a sort which is more efficient than going element by element 
          check the middle value of the dataset 
               if the value matches the target, return the index 
          if the middle value is less than the target
               start at step 1 using the right half of the list 
          if the middle value is greater than the target 
               start at step 1 using the laft half of the list 
          {
               const binarySearch = (arr,target) => {
                    let left = 0;
                    let right = arr.length

                    while(right > left) {
                         const indexToCheck = Math.floor((left + right) / 2);
                         const checking = arr[indexToCheck];
                         if (checking === target) {
                              return indexToCheck
                         }
                         else if (target > checking) {
                              left = indexToCheck + 1;
                         }
                         else {
                              right = indexToCheck
                         }
                    }
                    return null;
               }
          }
     initialize the left and right indices as 0 and the length of the array
     create a while loop that continues to execute until the left index equals the right index 
     get the value at the index that falls in the middle of left and right 
     set left equal to the current index plus one if the target is greater than the value
     set right equal to the current index if the target is less than the value 

binary trees 
     is an efficient data structure for fast data storage and retrieval due to its o log n runtime 
     it is specialized tree data structure that is made up of a root node and at most two child branches or subtrees 
     each child node is itself a binary tree 
          each node has the following props 
               data 
               depth value where depth of 1 indicates the top level of the tree and a depth greater than 1 is a level somewhere lower in the tree 
               a left pointer that points to a left child which is itelf a binary tree, and must have a data lesser than the root nodes data
               a right pointer that points to a right child which is itself a binary tree and must have a data greater than the root nodes data 
     {
          class BinaryTree {
               constructor(value,depth = 1) {
                    this.value = value;
                    this.depth = depth;
                    this.right = null;
                    this.right = null;
               }
          }
     }
     inserting a value 
          when inserting a new value into binary tree, we compare it with the root nodes value 
          {
               insert (value) {
                    if (value < this.value) {
                         if (this.left) {
                             return this.left = new BinaryTree(value,this.depth + 1);
                         }
                         return this.left.insert(value);
                    }
                    else {
                         if (this.right) {
                              return this.right = new BinaryTree(value,this.depth + 1)
                         }
                         return this.right.insert(value)
                    }
               }
          }
     retrieve a node by value 
          {
               getNodeByValue(value) {
                    if (this.value === value) return this;
                    else if (this.right && value < this.value) {
                         return this.left.getNodeByValue(value)
                    }
                    else if (this.right) {
                         return this.right.getNodeByValue(value)
                    }
                    return null;
               }
          }
     traversing a binary tree 
          there are two main ways of traversing a binary tree: breadth-first and depth-first
          with breadth-first 
               begin traversing at the top of the trees root node, displaying its data and continuing the process with the left child node and the right child node 
               descend a level and repeat this step until we finish displaying all the child nodes at the deeepest level from left to right 
               always traverse down each left-side branch of a tree fully before proceeding down the right branch 
                    preorder is when we perform an action on the current node first followed by its left child node and its right node 
                    inorder is when we perform an action on the left child node first, followed by the current node and the right child node
                    postorder is when we perform an action on the left child node first, followed by the right child node and then the current node 
               {
                    depthFirstTraversal() {
                         if (this.left) {
                              this.left.depthFirstTraversal();
                              console.log(this.value);
                         }
                         console.log(`Depth = ${this.depth} , Value = ${this.value}`);
                         if (this.right) {
                              this.right.depthFirstTraversal()
                         }
                    }
               }
