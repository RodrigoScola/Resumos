to create a formik form 
     import {useFormik} from 'formik';
     const signUpForm = () => {
          const formik = useFormik({
               initialValues: {email : ''},
               onSubmit: values => {
                    console.log(values)
               }
          })
     }
     return (
          <form onSubmit={formik.handleSubmit}>
               <label htmlFor='email'>email address</label>
               <input id='email' name='email' type='email' onChange={formik.handleChange} value={formik.values.email} />
               <button type='submit'>Submit</button>
          </form>
     )

if you have a lot of the same inputs it might look something like this 
     reuse the same exact change handler function for each input 
     pass an id and name that matches the prop we defined in initial values 
     access the fields value using the same name

validation
     to make every field required
          {const validate = values => {
               const errors = {};
               if (!values.name) {
                    errors.name = 'required'
               }
               //...for every value 
               return errors
          }}
     and on the input field 
          <input... />
          {formik.errors.inputName ? <div>{formik.errors.inputName}</div> : null}
     
visited fields
     to not show the error message on each keystroke, use the rouched
     <input id="firstName" name="firstName" type="text" onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.firstName} />
     {formik.errors.firstName && formik.touched.firstName ? <div>{formik.errors.firstName}</div> : null}

reducing boilerplate
     getFieldProps()
          useFormik returns a helper method to make it faster to wire up inputs 
               <input id='firstname' type='text' {...formik.getFieldProps('firstName')}/>
     leveraging react context
          you still have to manually pass for each input the prop getter. to save time you can use react context to connect with the parent formik state methods 
          {
               import {createContext} from 'react';
               import {useFormik} from 'formik';

               const FormikContext = createContext({})
               export const Formik = ({children,...props}) => {
                    const formikStateAndHelpers = useFormik(props);
                    return (
                         <FormikContext.Provider value={formikStateAndHelpers}>
                         {typeof children == 'function' ? children(formikStateAndHelpers) : children}
                         </FormikContext.Provider>
                    )
               }
          }
          