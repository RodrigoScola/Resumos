what is website security
     what do you think it is?

threats 
     xss cross-site scripting 
          class of attacks that allow an attacker to inject client-side scripts through the website into the browsers of other users 
          the xss vulnerabilities are divided into reflected and persistent 
               reflected 
                    when user content that is passed to the server is returned immediately and unmodified for display in the browser
                    For example, consider a site search function where the search terms are encoded as URL parameters, and these terms are displayed along with the results. An attacker can construct a 
                    search link that contains a malicious script as a parameter (e.g., http://mysite.com?q=beer<script%20src="http://evilsite.com/tricky.js"></script>)
               persistent
                    when the malicious script is stored on the website and then later redisplayed unmodified for other users to execute unwittingly 
     sql injection 
          execute arbitrary sql code on a database, allowing data to be accessed, modified, deleted;
               error based sql injection    
               sql injection on boolean errors 
               time based injection 
     cross site request forgery 
          execute actions using the credentials of another user

the basics of web application security

reject unexpected form input 
     html forms can create the illusion of controlling input. the form markup author might beleive that becuase they are restricting the types of values that a user can enter in the form the data will confom to those restrictions 
     but its no more than an illusion

untrusted input 
     data coming from the users browser, whether we are providing the form or not, and regardless of wheter the connection is https-protected, is effectivelly zero

input validation 
     is the process of ensuring input data is consistent with application expectations 
     data that falls outside of an expected set of values can cause the application to yield unexpected results
          positive validation
               limiting an input to only send a range of items 
                    only positive numbers if user is withdrawing/depositing money 
          whitelisting 
               restrict the input to a specific type
                    unable to add email on a date form 

encode html output 
     web application devs need to pay close attention to the data as it comes out, a modern application usually has basic html markup for document structure, css for document style, js for application logic and user-generated content
     an html document is really a collection of nested execution contexts separated by 

output risks 
     html is a very permissive format, attackers have the luxury of injecting content into the pages to break through execution contextx without even having to worry about wether the page is valid 

output encoding 
     convert outgoing data to a final output format. the complication with output encoding is that you need a different codec depending on how the outgoing data is going to be consumed 
     without appropriate output encoding, an application could provide its client with misformatted data making it unusable or dangerous 
     use \ to make something harmless and non intrusive to code 
          'Sandra Day O\';window.location=\'http://evil.martinfowler.com/\';' // this will render as a string, if it didnt, it would push the user to an hostile location

Bind Parameters for database queries
     the database is often the most crucial part of any web application since it contains state that cant be easily restored


---------------------------do the rest of the resume---------------------------

restful api auth 

authentication vs authorization 
     auth 
          the verification of the credentials of the connection attempt. this process consists of sending the credentials from the remote access
          client to the remote access server in an either plaintext or encrypted form by using an authentication protocol
     authorization  
          the verification that the connection attempt is allowed. authorization occurs after successful authentication
basic authentication
     the most simple way to deal with authentication is to use http baic authentication, we use a special http header where we add username:password encoded in base 64
          get / http /1.1 
          Host: example.org
          Authorization: Basic Z,0vPmJhcg==
hmac 
     one of the downsides of basic authentication is that we need to send over the password on every request. also it does not safeguard against tampering of headers or body

