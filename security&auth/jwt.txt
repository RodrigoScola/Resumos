jwt is just for authorization not authentication
    json web token
        proposed internet standard for creating data with optional signature
        or optional encryption whose payload holds json that asserts some number of claims.
        the tokens are sogmed either using a private secret or a public/private key
server could generate a token that has the claim 'logged in as administrator' and provide that to a client. the client could then use that token to prove that is logged in as admin
the tokens can be signed by one party`s private key (usually the server)
structure
     HEADER  
    {
        "alg": "HS256",
        "typ":"JWT"
    }
    identifies which algorithm the signature HS256 indeicates that this token signed using hmac-sha256
    PAYLOAD
    {
        "loggedInAs": "admin",
        "iat": 1422779638
    }
    contains a set of claims, the jwt specification defines seven registered claim names which are standard fields commonly included in tokens
    SIGNATURE
    {
        HMAC_SHA256(
            secret,
            base64urlEncoding(header) + '.' + base64urlEncoding(payload)
        )
    }
    securely validades the token, the signature is calculated by encoding the header and payload using base64url encoding rfc 4648 and concat the two together with a period separator
    use
    in auth, when the user successfully logs in using their credentials, a jwt returns and must be saved locally, instead of the traditional approach of creating a session in the server and returning a cookie
    if the client passes a valid jwt assertion the server will generate an access_token valid for making calls to the application and passit back to the client
        {
            "access_token": "aoriharnlsdf",
            "token_type": "Bearer",
            "expires_in": 6999
        }
    when the client wants to access a protected route or resource, the user agent should send the jwt, typically in the auth header using the bearer schema
standard fields
    standard claim fieds - the internet drafts define the following standard fields that can be used inside a jwt claim set
        code    name            desc
        iss     issuer          identifies principal that issued the jwt
        sub     subject         identifies the subject of the jwt
        aud     audience        identifies the recipients the the jwt is intended for. each principal intended to process the jwt MUST identify itself with a value in the audience claim
        exp     expiration_time the exp on and after the jwt, MUST NOT be accepted for processing, the value MUST be a numeric date
        nbf     not before      time which the jwt will start to be accepted for processing
        iat     issued at       when the jwt was issued
        jti     jwt id          case sensitive unique identifier of the token among the different issuers
    commonly used header fields
        typ     token type      must be set to a registered IANA Media type https://www.iana.org/assignments/media-types/media-types.xhtml
        cty     content type    if nested signing or encryption is employed, recommended to set to jwt or ommit field
        alg     message auth    issuer can freely set an alg to verify the signature on the token
        kid     key id          hint indicating which key the client used to generate the token signature
        crit    critical        list of headers that must be understood by the server in order to accept the token as valid
 JWT Playground: https://jwt.io/
