to comment use the #
exponentials use ** and the number you want it to be powered by

creating variables
    no need to say const or let... just say the name
        variablename = 'im the content of a variable'
you can convert string to float just by using float()
    pi_float = float(pi_string)

array slicing
arrayName[startIntdex(inclusive),endIndex(exclusive)]
    if you dont specify the beginning index, python will start at the beginning
    if you dont specify the end index, python will start at the end

    to remove an element from a list 
        del(fam[index])

if you want to add something to a list 
    listname.extend(['name']);
if you want to find the position of an element  
    listname.index('name');
if you want to remove that 
    listname.pop('name');

if you want to copy a list you can use the list() method or the x[:];
    x = ['a','b','c'];
    y = list(x);
    y = x[:];

    
if you want to check if something is true or false you can just use ==
    question = 12 * 8 
    solution = 96
    question == solution <- returns true

you can use a for leep to iterate through all the items in a list
    you can use the .sorted() wich will sort the data in a list from lowest to highest in the case of numbers and alphabetical order if the list contains strings
        the sorted() returns a new list and does not affect the list you passed 
            /// looping 
                for row in records :
                    baby_names.append(row[3]);
            /// sorting the name in alphabetical order 
                for name in sorted(baby_names):
                    print(name)

functions 
    if you see  a [] in a function, it means that is an optional argument
    to get the max number in a list 
        max(x);
    to get the min number in a list 
        min(x);
    to round a num
        round(num,how many numbers after .)
    to convert something 
        int(x) <- converts to an integer 
        float(x) <- converts to an float 
        Bool(x) <- converts to a boolean 
        str(x) <- converts to an string 
        
     multiple returns
          you can return multiple values and return them in a function
               def weather_data() {
                    return 1,2,3,4
               }
          day_one , day_two , day_three, day_four = weather_data()


methods
lists methods
    functions that belong to objects
    if you want an index of an element on a list    
        listname.index(element);
    you can count how many times the same element happens on the list
        listname.count(element);
str methods
    you can capitalize stuff
        sister = 'liz'
        sister.capitalize(); <= returns "Liz"
    you can make everything capitalized 
        sister.upper();
    you can replace stuff   
        sister.replace('z','sa') <= returns 'lisa'

dictionaries or Objcects

    creating a dictionary
        world = {'afganistan':30.55,'albania':2.77,'algeria':39.21}
    finding something  
        world['albanina'];
    to access the keys of the objects   
        world.keys(); <- for this to work, the keys have to be unique
    to add data to the object 
        world[key] = value
        


packages
       import numpy
    using numpy
        numpy.array([])
        or import numpy as np
    if you want a specific function 
        from numpy import array
        array([]);

numpy
    import numpy as np 
creating arrays
    np_height = np.array(height)
remarks 
    python_list = [1,2,3]
    python_list + python_list
        [1,2,3,1,2,3]
    numpy_array = np.array([1,2,3])
    numpy_array + numpy_array
        [2,4,6]
    getting an result == or >= or > 
        bmi[bmi < 10]
        array([2]);

type of numpy arrays
    2d numpy array
        np_2d = np.array([[1.43,3.12,3.12][1.23,12.33,1245.4]])
        np_2d.shape <- returns (2,5) # 2 rows, 5 collumns

statistics
    to calculate the average
        np.mean(array);
    calculate the median
        np.median(array[:,0]);
    to check if numbers are correlated
        np.corrcoef(array[:,0],array[:,1]);
    to check for the deivation
        np.std(array[:,0])
    to check for the sum
        np.sum(array[:,0]);
    to sort 
        np.sort(array[:,0]);


multiple returns
    python has multiple returns that you can assign to 
    {
        def weather_report(weather_data): 
            first_day = 'sun'
            second_day = 'moon'
            third_day = 'rain'
            return first_day, second_day, third_day
        
        # and use it like this 
        monday, tuesday, wednesday = weather_report(somedata)
    }

Booleans in python are True or False, with the capitalization
if statements doesnt have the ()
to add and operators, in python its "and" and not "&&"
to add or operators, in python its "or" and not "||"
to add not operators, in python its "not" and not "!"
else if 
    instead of using else if, use elif

to add to an array 
    array_name.append(item)
to remove an item from array 
    array_name.remove('value') #this only removes the first instance of the value

you can add items in an array using the + 
    [True, True, True] + [False]

combining arrays
    it combines the arrays on the same indexes 
        [
            [array1_name[0], array2_name[0]],
            [array1_name[1], array2_name[1]],
            [array1_name[2], array2_name[2]],
        ]
    to use it 
        temp_arr = zip(array1, array2)
        converted_list = list(temp_arr);
    however, the data has been converted into a tuple, an immuptable type of list 

working with lists 
    count - count occurences of element in list 
    insert - add item at index
    pop - remove element at index
    range - create a sequence of integers 
    len - get len of obj 
    sort / sorted - sort a list 

pop -
    it removes on the index itself and returns the removed element 
    {
        removed_elem = array.pop()
        # array doesnt have that element 
        print(removed_elem) # the element 
    }

range - 
    range doesnt return the actual list, but the "function"
    # range(0, 10)
    to transform it into a list 
    array_name = list(range(10));

    range(start?/end, end, step);

slicing lists 
    you can slice a list withing the variable attribuition
        sliced = letters[start_idx:end_idx]
    if you want to get the first n elements -> arra[:n]
    if you want to get the last n elements -> arra[-n:]
    if you want all but n elements -> arra[:-n]

count - letters.count(item)

sort - 
    to sort in ascending order -> arr.sort()
    to sort in descending order -> arr.sort(reverse=True)
sorted - 
    the function to sort -> sorted(arr)

for loops 
    for temp_var in collection:
    using range - for num in range(nums):
    you can use break in the loop 
    {
        for item in items:
            if item == 'search_item':
                break
    }

list comprehension 
    map but for python
        {
            new_list = [item * 2 for item in collection]
        }
    conditions in for loop
        {
            new_list = [for item in items if condition]
        }
    doing it together
        {
            new_list = [num * 2 for num in nums if num > 0] #this will filter and do something to the ones that passed

            new_list = [num * 2 if num < 0 else num * 3 for num in numbers] # this will do something to every number
        }
    you can separate the variables 
        xy = [[1,2],[2,3],[3,4]]
        z = [x * y for (x,y) in xy]

make an api request in python
    impor requrests
    r = requests.get(url);
    r.json();
convert json to csv 
    make the data in tabular form 
    {
        import csv 
        with open('census.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(r.json);
    }
    # it writes things to a file 

simulating binomial distribuition   
    they are very useful for modeling different types of data, they have 2 possible outcomes, success and failure
    {
        numpy.random.binomial(attempts, success_probability,times)
    }

strings are immuptable, meaning if you want to change a string you need to change the whole thing

string methods 
    formatting methods ex - Hello wOrld
        .lower - returns all lowercase characters - hello world
        .upper - returns all uppercase characters - HELLO WORLD
        .title - returns in title case - Hello World
        .split - splits the string from delimiter
        .join - delimiter.join(string) 
        .strip - removes the content from the start of the string and the end, defaults to white space, but you can add delimiters 
        .replace - str.replace(search, replace) #replaces all instances 
        .find - finds the index at what the element is at 
        .format - include variables in strings, "this is a normal string {}".format(term)" # this is a normal string and this was added by a variable
                you can specify which variable goes where 
                {
                    def favor_song(song, artist):
                        return "my favourite artist is {artist} and my favourite song is {song}".format(artist=artist, song=song)
                }
